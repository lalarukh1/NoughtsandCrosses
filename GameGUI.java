import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import java.lang.String;
import java.lang.Object;
import java.util.ArrayList;
import javax.swing.UIManager;
import java.io.*;
import java.util.Scanner;
import java.io.IOException;
import java.io.StringWriter;
import java.io.File;
/**
 * The GameGUI class implements a graphical user interface for 'Noughts and Crosses' game with 9 buttons to play the game, text fields 
 * and labels to display scores and a button to start new game. The class handles events generated by the swing GUI components with the 
 * help of actionPerformed method. The class checks if a false value is received in its constructor, it takes a turn via takeTurn() method
 * and sets the value to true. When true value is received, it checks if human player has taken his turn. If a button is pressed, it sets
 * the button with X mark and let the computer take its turn. Win condition is checked after each player's turn via winner() method. If a
 * win or draw condition is reached it announces it with the help of a dialog box asking if player ants to continue or abort the game. If
 * continue is selected,scores are added in text fields and game starts again. Otherwise game is closed. If new game button is pressed, 
 * game is re-initialised using reset() method. A random Naive or Smart player is selected once after the game starts.
 *
 * @Lala Rukh
 * @2018.01.07
 */
public class GameGUI extends JFrame implements ActionListener {
 Container contentPane = getContentPane();
 JPanel p2 = new JPanel(new GridLayout(3, 3)); // For buttons
 JPanel p1 = new JPanel(new FlowLayout()); // For score fields
 JLabel youLabel = new JLabel("Computer :");
 JTextField youTextField = new JTextField(7);
 JLabel meLabel = new JLabel("Me :");
 JTextField meTextField = new JTextField(7);
 JLabel drawLabel = new JLabel("Draw :");
 JTextField drawTextField = new JTextField(7);
 JButton newGame = new JButton("New Game");
 JButton[][] buttons = new JButton[3][3];
 private boolean choice1;
 private int playerType;
 private int ri;
 private int rj;
 private int count;
 private byte p1Turns = 0;
 private byte rounds = 0;
 private int turns = 0;
 private int newG = 0;
 private int oCount = 0;
 private ComputerPlayer p;
 private ArrayList < String > ar;
 JFrame frame = new JFrame();
 private String me;
 private String computer;
 private String draw;
 private int me1 = 0;
 private int computer1 = 0;
 private int draw1 = 0;

 /**
  * Constructor for objects of class GameGUI. It sets the layout and colors etc of swing components and assign them the action listeners.
  * It also displays the components in right positions. It checks if its computer players turn first and let it take its turn. It also 
  * reads scores from an external file and displays them. 
  */
 public GameGUI(boolean choice) {
  super("Noughts and Crosses Game");
  setSize(560, 500);
  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  addWindowListener(exitListener);
  //set colors and borders
  newGame.setBackground(Color.WHITE);
  meTextField.setBackground(Color.WHITE);
  meTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder());
  meTextField.setFont(new Font("Serif", Font.BOLD, 14));
  youTextField.setBackground(Color.WHITE);
  youTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder());
  youTextField.setFont(new Font("Serif", Font.BOLD, 14));
  drawTextField.setBackground(Color.WHITE);
  drawTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder());
  drawTextField.setFont(new Font("Serif", Font.BOLD, 14));
  newGame.setForeground(new Color(169, 9, 9));
  UIManager.put("Button.disabledText", Color.WHITE);
  UIManager.put("Button.enabledText", Color.WHITE);
  UIManager.put("newGame.enabledText", Color.RED);
  p1.setBackground(Color.WHITE);
  contentPane.setBackground(Color.WHITE);
  // add components to layouts
  p1.add(meLabel);
  p1.add(meTextField);
  meTextField.addActionListener(this);
  meTextField.setEditable(false);
  p1.add(youLabel);
  p1.add(youTextField);
  youTextField.addActionListener(this);
  youTextField.setEditable(false);
  p1.add(drawLabel);
  p1.add(drawTextField);
  drawTextField.addActionListener(this);
  drawTextField.setEditable(false);
  p1.add(newGame);
  newGame.addActionListener(this);

  for (int i = 0; i < 3; i++)
   for (int j = 0; j < 3; j++) {
    buttons[i][j] = new JButton();
    buttons[i][j].addActionListener(this);
    buttons[i][j].setFont(new Font("Serif", Font.PLAIN, 70));
    buttons[i][j].setBackground(new Color(169, 9, 9));
    p2.add(buttons[i][j]);
   }

  contentPane.add(p1, BorderLayout.PAGE_START); // To arrange components as needed
  contentPane.add(p2, BorderLayout.CENTER);
  setLocationRelativeTo(frame);
  setVisible(true);
  //check if it's computer's turn first
  choice1 = choice;
  if (choice1 == false) { // Computer takes turn first
   reportPlay();
   turns = (byte)(turns + 1); // One turn completes (Using byte - better performance than int)
   choice1 = true; // Gives control back to human player
  }
  //read scores from external file
  try { 
   Scanner sc = new Scanner(new FileInputStream("data.txt"));
   while (sc.hasNext()) {
    String me = sc.nextLine();
    meTextField.setText(me);
    String computer = sc.nextLine();
    youTextField.setText(computer);
    String draw = sc.nextLine();
    drawTextField.setText(draw);

   }
   sc.close();
  } catch (FileNotFoundException e) {
   System.out.println("Error: Could not find file.");
   System.out.println(e.getMessage());
   e.printStackTrace();
  }
 }
 // For closing the game 
 WindowListener exitListener = new WindowAdapter() {
  public void windowClosing(WindowEvent e) {
   int confirm = JOptionPane.showOptionDialog(
    null, "Are You Sure to Close the Game?",
    "Exit Confirmation", JOptionPane.YES_NO_OPTION,
    JOptionPane.QUESTION_MESSAGE, null, null, null);
   if (confirm == 0) {
    reset();
    System.exit(0);
   }
  }
 };

 /**
  * Method for handling events created by swing components. It starts a new game if new game button is pressed via reset() method and 
  * calling player choice class. It also checks variables and sets the text of buttons where human or computer player takes their turns.
  * It checks for win conditions and displays a dialog box announcing the win if a condition is met. It updates the scores afterwards.
  */
 public void actionPerformed(ActionEvent event) {

  if (event.getSource() == newGame) {
   newG = 2; 
   reset(); // reset variables and close the current instance of game
   PlayerChoice Plch = new PlayerChoice(); //starts new instance of game 
  }

  if (choice1 == true) { //Human goes first
   JButton b = (JButton) event.getSource();
   if (turns == 0) { //Human's first turn
    b.setText("X");
    reportPlay(); // Select one random player type and take turn
    rounds = (byte)(rounds + 1); //one round completes
   }

   b.setText("X"); 
   b.setEnabled(false); // Stop user from selecting already selected button
   turns = (byte)(turns + 1); 
   rounds = (byte)(rounds + 1);
   p1Turns = (byte)(p1Turns + 1); // human players turn taken

   boolean result = winner(); // Check win conditions
   if (result == false) { // No win/draw condition met
    if (rounds == p1Turns) {
     takeTurn(p); //Computer turn
     turns = (byte)(turns + 1);
    } else if (rounds != p1Turns) {
     p1Turns = (byte)(p1Turns + 1); 
    }
   }
  }

  boolean result = winner(); // Check win conditions
  if (result == true) { // Win condition met
   JOptionPane pane = new JOptionPane(); // create a dialog box
   Object[] options = {
    "Play Again",
    "Quit"
   };
   int n = 0;

   try {
    Scanner sc = new Scanner(new FileInputStream("data.txt")); // reads from already present file
    while (sc.hasNext()) {
     me = sc.nextLine();
     me1 = Integer.parseInt(me); // convert string to integer
     computer = sc.nextLine();
     computer1 = Integer.parseInt(computer);
     draw = sc.nextLine();
     draw1 = Integer.parseInt(draw);
    }
   } catch (IOException e) {
    e.printStackTrace();
   } catch (NumberFormatException ex) {
    System.out.println("Problem with String value");
    System.out.println(ex);
   }

   if (oCount == 1) { // Computer win
    n = pane.showOptionDialog(frame,"Computer wins! Can't you beat a machine?",
     "What would you like to do?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
     null, options, options[0]);
    try {
     PrintWriter pw = new PrintWriter("data.txt"); // new text document
     int computer2 = computer1 + 1; // Update scores
     pw.println(me1);
     pw.println(computer2);
     pw.println(draw1);
     pw.flush();
     pw.close();

    } catch (IOException e) {
     e.printStackTrace();
    }

   } else if (oCount == 9) { // Draw

    n = pane.showOptionDialog(frame, "It's a draw! Better Luck Next Time ",
     "What would you like to do?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
     null, options, options[0]);

    try {
     PrintWriter pw = new PrintWriter("data.txt");
     int draw2 = draw1 + 1;
     pw.println(me1);
     pw.println(computer1);
     pw.println(draw2);
     pw.flush();
     pw.close();

    } catch (IOException e) {
     e.printStackTrace();
    }

   } else {
    n = pane.showOptionDialog(frame, "Yay You Win! Who says computers are intelligent?",
     "What would you like to do?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
     null, options, options[0]);

    try {
     PrintWriter pw = new PrintWriter("data.txt");
     int me2 = me1 + 1;
     pw.println(me2);
     pw.println(computer1);
     pw.println(draw1);
     pw.flush();
     pw.close();
    } catch (IOException e) {
     e.printStackTrace();
    }
   }

   if (n == pane.NO_OPTION) {
    reset(); // quit the game
   }
   if (n == pane.YES_OPTION) {
    PlayerChoice Plch = new PlayerChoice(); // play the game again
   }
   setVisible(false); // makes it disappear
  }

 }
 /**
  * Method for resetting the game. It re-initialises the variables and sets buttons text to blank. It also updates scores back to zero and 
  * closes the current game.
  */
 public void reset() {
  setVisible(false);
  dispose(); 
  //re-initialize variables
  turns = 0;
  p1Turns = 0;
  rounds = 0;

  for (int i = 0; i < 3; i++)
   for (int j = 0; j < 3; j++) {
    buttons[i][j].setText(null);
    buttons[i][j].setEnabled(true);
    break;
   }
  // Write scores as zero
  try {
   PrintWriter pw = new PrintWriter("data.txt");
   pw.println("0");
   pw.println("0");
   pw.println("0");
   pw.flush();
   pw.close();
  } catch (IOException e) {
   e.printStackTrace();
  }
 }
 /**
  * Method for checking win conditions for either human or computer. It also checks draw condition.
  */
 public boolean winner() {
  //check rows, columns and diagonals for human player
  if (buttons[0][0].getText() == "X" && buttons[0][1].getText() == "X" && buttons[0][2].getText() == "X" 
  || (buttons[1][0].getText() == "X" && buttons[1][1].getText() == "X" && buttons[1][2].getText() == "X") 
  || (buttons[2][0].getText() == "X" && buttons[2][1].getText() == "X" && buttons[2][2].getText() == "X") 
  || (buttons[0][0].getText() == "X" && buttons[1][0].getText() == "X" && buttons[2][0].getText() == "X") 
  || (buttons[0][1].getText() == "X" && buttons[1][1].getText() == "X" && buttons[2][1].getText() == "X") 
  || (buttons[0][2].getText() == "X" && buttons[1][2].getText() == "X" && buttons[2][2].getText() == "X") 
  || (buttons[0][0].getText() == "X" && buttons[1][1].getText() == "X" && buttons[2][2].getText() == "X") 
  || (buttons[0][2].getText() == "X" && buttons[1][1].getText() == "X" && buttons[2][0].getText() == "X")) {
   return true;
   //check rows, columns and diagonals for computer player
  } else if ((buttons[0][0].getText() == "O" && buttons[0][1].getText() == "O" && buttons[0][2].getText() == "O") 
  || (buttons[1][0].getText() == "O" && buttons[1][1].getText() == "O" && buttons[1][2].getText() == "O") 
  || (buttons[2][0].getText() == "O" && buttons[2][1].getText() == "O" && buttons[2][2].getText() == "O") 
  || (buttons[0][0].getText() == "O" && buttons[1][0].getText() == "O" && buttons[2][0].getText() == "O") 
  || (buttons[0][1].getText() == "O" && buttons[1][1].getText() == "O" && buttons[2][1].getText() == "O") 
  || (buttons[0][2].getText() == "O" && buttons[1][2].getText() == "O" && buttons[2][2].getText() == "O") 
  || (buttons[0][0].getText() == "O" && buttons[1][1].getText() == "O" && buttons[2][2].getText() == "O") 
  || (buttons[0][2].getText() == "O" && buttons[1][1].getText() == "O" && buttons[2][0].getText() == "O")) {
   oCount = 1;
   return true;
   // check if it is a draw 
  } else if (p1Turns == 6 || turns == 9) {
   oCount = 9;
   return true;
  } else
   return false;
 }

 /**
  * Method for selecting either Naive or Smart player randomly. It creates an instance of respective class and passes it as parameter in
  * makeMove() method.
  */
 public ComputerPlayer reportPlay() {
  int playerType = 0;
  Random rc = new Random(); //select random player every time game starts
  playerType = rc.nextInt(2);

  if (playerType == 1) {
   p = new Naive();
   takeTurn(p); //call the method passing Naive as parameter

  } else {
   p = new Smart();
   takeTurn(p); //call the method passing Smart as parameter
  }
  return p;
 }
 
 /**
  * Method that receives values of turns from either player type and checks if that position is blank. It then sets the text of that 
  * position on the button grid and returns the current values on the grid.
  */
 public ArrayList < String > takeTurn(ComputerPlayer p) {
  //store current button values in an array list before making the move
  ArrayList < String > movesArray = new ArrayList < String > (); 
  for (int i = 0; i < 3; i++)
   for (int j = 0; j < 3; j++) {
    buttons[i][j].getText();
    movesArray.add(buttons[i][j].getText());
   }
  boolean done = false;
  // loop to find empty button positions
  while (done == false) {      
    int result[] = p.makeMove(movesArray); // receives position values returned by the method
    int ri = result[0]; // stores values in integers
    int rj = result[1]; 
   // change text of button if empty button found
   if (buttons[ri][rj].getText() == "") {
    buttons[ri][rj].setText("O");
    buttons[ri][rj].setEnabled(false); //to stop user from selecting already selected button
    done = true;
    break;
   }
   // in case of draw
   if (p1Turns == 6) {
    done = true;
    break;
   }
   //in case of new game button pressed
   if (newG == 2) {
    done = true;
    break;
   }

  }
  ArrayList < String > movesArray1 = new ArrayList < String > ();
  for (int i = 0; i < 9; i++) {
   movesArray1.add(movesArray.get(i));
  }
  return movesArray1; // current array after making the move
 }
}